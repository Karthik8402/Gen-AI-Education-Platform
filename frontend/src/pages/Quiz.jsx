import React, { useMemo, useState } from 'react'
import { api } from '@/services/api' // add this import to call Flask

export default function Quiz() {
  const [questions, setQuestions] = useState([])        // start empty
  const [quizId, setQuizId] = useState(null)            // store for submit if needed
  const [idx, setIdx] = useState(0)
  const [selected, setSelected] = useState(null)
  const [answers, setAnswers] = useState([])
  const [finished, setFinished] = useState(false)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')

  const total = questions.length
  const q = questions[idx]

  const score = useMemo(() => {
    return answers.reduce((acc, a, i) => acc + (a === questions[i]?.answer ? 1 : 0), 0)
  }, [answers, questions])

  const onSelect = (i) => setSelected(i)

  const onNext = () => {
    if (selected == null || loading) return
    const next = [...answers]
    next[idx] = selected
    setAnswers(next)
    setSelected(null)
    if (idx === total - 1) setFinished(true)
    else setIdx(idx + 1)
  }

  const onRestart = () => {
    if (loading) return
    setIdx(0); setSelected(null); setAnswers([]); setFinished(false)
  }

  // FETCH FROM FLASK AI ENDPOINT AND DISPLAY
  const generateWithAI = async () => {
    setError('')
    setLoading(true)
    try {
      const res = await api('/api/quiz/generate', {
        method: 'POST',
        body: { language: 'SQL', questions: 5, choices: 4, difficulty: 'intermediate' },
      })
      // res.quiz.questions: [{ question, choices, answer }]
      const mapped = (res.quiz?.questions || []).map((qq, i) => ({
        id: i + 1,
        question: qq.question,
        choices: qq.choices,
        // Keep correct index for local scoring:
        answer: qq.choices.findIndex(c => c === qq.answer),
        explanation: 'Generated by AI', // optional
      }))
      setQuizId(res.quizId)
      setQuestions(mapped)
      setIdx(0); setAnswers([]); setSelected(null); setFinished(false)
    } catch (err) {
      setError(err.message || 'Failed to generate quiz')
    } finally {
      setLoading(false)
    }
  }

  return (
    <main className="mx-auto max-w-3xl px-6 py-10 lg:px-8">
      <h1 className="text-2xl font-semibold text-gray-900">SQL Joins Quiz</h1>
      <p className="mt-1 text-sm text-gray-500">Generate questions with AI and take the quiz.</p>

      <div className="mt-4 flex items-center gap-3">
        <button
          type="button"
          onClick={generateWithAI}
          disabled={loading}
          className="relative inline-flex items-center gap-2 rounded-lg bg-indigo-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 disabled:opacity-60"
        >
          {loading && <span className="h-4 w-4 animate-spin rounded-full border-2 border-white/60 border-t-white" />}
          {loading ? 'Generating…' : 'Generate with AI'}
        </button>
        {!!total && !finished && (
          <button
            type="button"
            onClick={onRestart}
            disabled={loading}
            className="rounded-lg border border-gray-300 bg-white px-4 py-2 text-sm font-semibold text-gray-700 hover:bg-gray-50 disabled:opacity-60"
          >
            Reset
          </button>
        )}
      </div>

      {error && <p className="mt-3 rounded-md bg-rose-50 p-3 text-sm text-rose-700">{error}</p>}

      {!total ? (
        <div className="mt-6 rounded-xl border border-dashed border-gray-300 p-10 text-center text-sm text-gray-600">
          Click “Generate with AI” to load questions.
        </div>
      ) : !finished ? (
        <section className="relative mt-6 space-y-6 rounded-xl border border-gray-200 bg-white p-6 shadow-sm">
          {loading && (
            <div className="absolute inset-x-0 top-0 h-1 overflow-hidden rounded-t-xl bg-indigo-100">
              <div className="h-1 w-1/3 animate-[loading_1.2s_linear_infinite] bg-indigo-500" />
            </div>
          )}

          <Progress current={idx} total={total} />

          <div>
            <p className="text-sm text-gray-500">Question {idx + 1} of {total}</p>
            <h2 className="mt-1 text-lg font-semibold text-gray-900">{q.question}</h2>
          </div>

          <ul className="space-y-3">
            {q.choices.map((c, i) => {
              const active = selected === i
              return (
                <li key={i}>
                  <button
                    type="button"
                    onClick={() => !loading && onSelect(i)}
                    disabled={loading}
                    className={`w-full rounded-lg border px-4 py-3 text-left text-sm transition-colors ${
                      active ? 'border-indigo-600 bg-indigo-50 text-indigo-900'
                             : 'border-gray-200 bg-white text-gray-800 hover:bg-gray-50'
                    } ${loading ? 'opacity-60 cursor-not-allowed' : ''}`}
                  >
                    {c}
                  </button>
                </li>
              )
            })}
          </ul>

          <div className="flex items-center justify-between">
            <button
              type="button"
              className="rounded-lg border border-gray-300 bg-white px-4 py-2 text-sm font-semibold text-gray-700 hover:bg-gray-50 disabled:opacity-50"
              onClick={() => setIdx(Math.max(0, idx - 1))}
              disabled={idx === 0 || loading}
            >
              Back
            </button>
            <button
              type="button"
              onClick={onNext}
              disabled={selected == null || loading}
              className="rounded-lg bg-indigo-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 disabled:opacity-50"
            >
              {idx === total - 1 ? 'Finish' : 'Next'}
            </button>
          </div>
        </section>
      ) : (
        <section className="mt-8 space-y-6 rounded-xl border border-gray-200 bg-white p-6 shadow-sm">
          <h2 className="text-xl font-semibold text-gray-900">Results</h2>
          <p className="text-sm text-gray-600">
            Score: <span className="font-semibold text-gray-900">{score}</span> / {total}
          </p>

          <div className="space-y-4">
            {questions.map((qq, i) => {
              const user = answers[i]
              const correct = user === qq.answer
              return (
                <div key={qq.id} className="rounded-lg border border-gray-100 p-4">
                  <p className="font-medium text-gray-900">Q{i + 1}. {qq.question}</p>
                  <p className={`mt-1 text-sm ${correct ? 'text-emerald-700' : 'text-rose-700'}`}>
                    {correct ? 'Correct' : `Incorrect (Chosen: ${qq.choices[user] ?? '—'})`}
                  </p>
                </div>
              )
            })}
          </div>

          <div className="flex items-center justify-end">
            <button
              type="button"
              onClick={onRestart}
              className="rounded-lg bg-indigo-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500"
            >
              Retry quiz
            </button>
          </div>
        </section>
      )}

      <style>{`
        @keyframes loading {
          0% { transform: translateX(-100%); }
          50% { transform: translateX(10%); }
          100% { transform: translateX(100%); }
        }
      `}</style>
    </main>
  )
}

function Progress({ current, total }) {
  const pct = Math.round(((current + 1) / total) * 100)
  return (
    <div>
      <div className="mb-2 flex items-center justify-between">
        <p className="text-sm font-medium text-gray-700">Progress</p>
        <p className="text-sm text-gray-500">{pct}%</p>
      </div>
      <div className="h-2 w-full overflow-hidden rounded-full bg-gray-200">
        <div className="h-2 bg-indigo-600 transition-all" style={{ width: `${pct}%` }} />
      </div>
    </div>
  )
}
